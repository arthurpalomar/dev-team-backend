version: "3.8"

services:
  postgres:
    image: postgres:15.4-bullseye
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file:
      - .env.local
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: =${DB_NAME}
    deploy:
      restart_policy:
        condition: on-failure
        window: 30s
        max_attempts: 3
    shm_size: 256mb
    healthcheck:
      test: [ CMD, pg_isready, -d, $DB_NAME, -U, $DB_USER ]
      start_period: 30s
      interval: 60s
      timeout: 5s
    networks:
      - backend
    restart: unless-stopped

  cache:
    image: redis:6.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - cache:/data
    env_file:
      - .env.local
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: redis-server --save 20 1 --loglevel warning
    networks:
      - backend
    restart: unless-stopped

#  redis-commander:
#    container_name: redis-commander
#    hostname: redis-commander
#    image: rediscommander/redis-commander:latest
#    restart: always
#    env_file:
#      - .env.local
#    depends_on:
#      - cache
#    environment:
#      - REDIS_HOSTS=local:cache:6379
#      - REDIS_PASSWORD=${REDIS_PASSWORD}
#      - HTTP_USER=${REDIS_COMMANDER_USER}
#      - HTTP_PASSWORD=${REDIS_COMMANDER_PASSWORD}
#    ports:
#      - "20001:8081"
#    networks:
#      - backend

  backend:
    build: &build-dev
      context: ./
      dockerfile: ./docker/dev-backend/Dockerfile
    container_name: dev-backend
    hostname: backend
    image: scratch
    restart: always
    env_file:
      - .env.local
    depends_on:
      - cache
      - postgres
    entrypoint: ["/backend"]
    ports:
    - "80:80"
    - "443:443"
    - "8000:8000"
    volumes:
      - ./bin/backend:/backend
    networks:
      - backend
#
#  tx:
#    privileged: true
#    build: &build-dev
#      context: ./
#      dockerfile: ./docker/dev-tx/Dockerfile
#    container_name: dev-tx
#    hostname: tx
#    image: scratch
#    restart: always
#    env_file:
#      - .env.local
#    depends_on:
#      - cache
#      - postgres
#      - backend
#    entrypoint: [ "/tx" ]
#    volumes:
#      - ./bin/tx:/tx
#      - /var/run/docker.sock:/var/run/docker.sock
#    networks:
#      - backend

volumes:
  postgres:
    name: db
  cache:
    driver: local

networks:
  backend:
    name: backend
    external: true
    driver: bridge


